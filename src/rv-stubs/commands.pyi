def activateMode(name: str) -> None: ...
def activeEventTables() -> [str]: ...
def activeModes() -> [str]: ...
def addSource(fileName: str) -> None: ...
def addSource(fileNames: list[str]) -> None: ...
def addSourceBegin() -> None: ...
def addSourceEnd() -> None: ...
def addSourceMediaRep(sourceNode: str, mediaRepName: str, mediaRepPathsAndOptions: list[str]) -> str: ...
def addSourceVerbose(filePathsAndOptions: list[str]) -> str: ...
def addSources(fileNames: list[str]) -> None: ...
def addSourcesVerbose(filePathsAndOptions: list[list[str]]) -> list[str]: ...
def addToSource(fileName: str) -> None: ...
def addToSource(sourceNode: str, fileName: str, tag: str) -> None: ...
def alertPanel(associated: bool, type: int, title: str, message: str, button0: str, button1: str, button2: str) -> int: ...
def audioCacheMode() -> int: ...
def audioTextureComplete() -> float: ...
def audioTextureID() -> int: ...
def beginCompoundCommand() -> None: ...
def bgMethod() -> str: ...
def bindingDocumentation(eventName: str) -> str: ...
def bindings() -> list[tuple[str, str]]: ...
def cacheDir() -> str: ...
def cacheInfo() -> tuple[int, int, int, float, float, float, list[int]]: ...
def cacheMode() -> int: ...
def cacheOutsideRegion() -> bool: ...
def cacheSize() -> int: ...
def center() -> None: ...
def clearAllButFrame(frame: int) -> None: ...
def clearHistory() -> None: ...
def clearSession() -> None: ...
def close() -> None: ...
def closestNodesOfType(typeName: str) -> list[str]: ...
def commandLineFlag(flagName: str) -> str: ...
def contentAspect() -> float: ...
def contractSequences(files: list[str]) -> list[str]: ...
def crash() -> None: ...
def currentFrameStatus() -> int: ...
def deactivateMode(name: str) -> None: ...
def decodePassword(password: str) -> str: ...
def defineMinorMode(name: str) -> None: ...
def deleteNode(nodeName: str) -> None: ...
def deleteProperty(propertyName: str) -> None: ...
def editNodeSource(nodeName: str) -> None: ...
def editProfiles() -> None: ...
def elapsedTime() -> float: ...
def encodePassword(password: str) -> str: ...
def endCompoundCommand() -> None: ...
def eval() -> str: ...
def eventToCameraSpace(sourceName: str, point: tuple[float, float]) -> tuple[float, float]: ...
def eventToImageSpace(sourceName: str, point: tuple[float, float]) -> tuple[float, float]: ...
def existingFilesInSequence(sequence: str) -> list[str]: ...
def existingFramesInSequence(sequence: str) -> list[int]: ...
def exportCurrentFrame(filename: str) -> None: ...
def exportCurrentSourceFrame(filename: str) -> None: ...
def fileKind(filename: str) -> int: ...
def filterLiveReviewEvents() -> bool: ...
def flushCachedNode(nodeName: str) -> None: ...
def fps() -> float: ...
def frame() -> int: ...
def frameEnd() -> int: ...
def frameStart() -> int: ...
def fullScreenMode(active: bool) -> None: ...
def getByteProperty(propertyName: str) -> bytearray: ...
def getCurrentAttributes() -> list[tuple[str, str]]: ...
def getCurrentImageChannelNames() -> list[str]: ...
def getCurrentImageSize() -> tuple[float, float]: ...
def getCurrentNodesOfType() -> list[str]: ...
def getCurrentPixelValue(point: tuple[float, float]) -> tuple[float, float, float, float]: ...
def getFiltering() -> int: ...
def getFloatProperty(propertyName: str) -> list[float]: ...
def getHalfProperty(propertyName: str) -> list[float]: ...
def getIntProperty(propertyName: str) -> list[int]: ...
def getReleaseVariant() -> str: ...
def getRendererType() -> str: ...
def getSessionType() -> int: ...
def getStringProperty(propertyName: str) -> list[str]: ...
def getVersion() -> list[int]: ...
def hopProfDynName(name: str) -> None: ...
def httpGet(url: str, headers: list[tuple[str, str]], replyEvent: str) -> None: ...
def httpPost(url: str, headers: list[tuple[str, str]], postString: str, replyEvent: str) -> None: ...
def imageGeometry(name: str) -> list[tuple[float, float]]: ...
def imageGeometryByIndex(index: int) -> list[tuple[float, float]]: ...
def imageGeometryByTag(name: str, value: str) -> list[tuple[float, float]]: ...
def imageToEventSpace(sourceName: str, point: tuple[float, float]) -> tuple[float, float]: ...
def imagesAtPixel(point: tuple[float, float]) -> list[PixelImageInfo]: ...
def inPoint() -> int: ...
def inc() -> int: ...
def inputAtPixel(point: tuple[float, float]) -> str: ...
def insertByteProperty(propertyName: str, value: bytearray) -> None: ...
def insertFloatProperty(propertyName: str, value: list[float]) -> None: ...
def insertHalfProperty(propertyName: str, value: list[float]) -> None: ...
def insertIntProperty(propertyName: str, value: list[int]) -> None: ...
def insertStringProperty(propertyName: str, value: list[str]) -> None: ...
def ioFormats() -> list[IOFormat]: ...
def ioParameters(extension: str, forEncode: bool) -> list[IOParameter]: ...
def isBottomViewToolbarVisible() -> bool: ...
def isBuffering() -> bool: ...
def isCaching() -> bool: ...
def isConsoleVisible() -> bool: ...
def isCurrentFrameError() -> bool: ...
def isCurrentFrameIncomplete() -> bool: ...
def isDebug() -> bool: ...
def isFullScreen() -> bool: ...
def isMarked(frame: int) -> bool: ...
def isMenuBarVisible() -> bool: ...
def isModeActive(name: str) -> bool: ...
def isPlaying() -> bool: ...
def isRealtime() -> bool: ...
def isTimerRunning() -> bool: ...
def isTopViewToolbarVisible() -> bool: ...
def launchTLI() -> None: ...
def licensingState() -> int: ...
def loadChangedFrames(sourceNodes: list[str]) -> None: ...
def loadCount() -> int: ...
def loadTotal() -> int: ...
def logMetrics(event: str) -> None: ...
def logMetricsWithProperties(event: str, properties: str) -> None: ...
def mapPropertyToGlobalFrames(propName: str, maxDepth: int) -> list[int]: ...
def margins() -> tuple[float, float, float, float]: ...
def markFrame(frame: int, mark: bool) -> None: ...
def markedFrames() -> list[int]: ...
def mbps() -> float: ...
def metaEvaluate(frame: int) -> list[MetaEvalInfo]: ...
def metaEvaluateClosestByType(frame: int, typeName: str) -> list[MetaEvalInfo]: ...
def myNetworkHost() -> str: ...
def myNetworkPort() -> int: ...
def narrowToRange(frameStart: int, frameEnd: int) -> None: ...
def narrowedFrameEnd() -> int: ...
def narrowedFrameStart() -> int: ...
def networkAccessManager() -> qt.QNetworkAccessManager: ...
def newImageSource(mediaName: str, width: int, height: int, uncropWidth: int, uncropHeight: int, uncropX: int, uncropY: int, pixelAspect: float, channels: int, bitsPerChannel: int, floatingPoint: bool, startFrame: int, endFrame: int, fps: float) -> str: ...
def newImageSourcePixels(sourceName: str, frame: int) -> str: ...
def newNDProperty(propertyName: str, propertyType: int, propertyDimensions: (int,int,int,int)) -> None: ...
def newNode(nodeType: str) -> str: ...
def newProperty(propertyName: str, propertyType: int, propertyWidth: int) -> None: ...
def newSession(files: list[str]) -> None: ...
def nextViewNode() -> str: ...
def nodeConnections(nodeName: str) -> (list[str],list[str]): ...
def nodeExists(nodeName: str) -> bool: ...
def nodeGroup(nodeName: str) -> str: ...
def nodeGroupRoot(nodeName: str) -> str: ...
def nodeImageGeometry(nodeName: str, frame: int) -> NodeImageGeometry: ...
def nodeRangeInfo(nodeName: str) -> NodeRangeInfo: ...
def nodeType(nodeName: str) -> str: ...
def nodeTypes() -> list[str]: ...
def nodes() -> list[str]: ...
def nodesInGroup(nodeName: str) -> list[str]: ...
def nodesOfType() -> list[str]: ...
def ocioUpdateConfig() -> None: ...
def openFileDialog(associated: bool) -> list[str]: ...
def openMediaFileDialog(associated: bool, selectType: int) -> list[str]: ...
def openUrl(url: str) -> None: ...
def optionsNoPackages() -> int: ...
def optionsPlay() -> int: ...
def optionsProgressiveLoading() -> int: ...
def outPoint() -> int: ...
def packageListFromSetting(settingName: str) -> list[str]: ...
def play() -> None: ...
def playMode() -> int: ...
def popEventTable() -> None: ...
def popEventTable(table: str) -> None: ...
def prefTabWidget() -> qt.QTabWidget: ...
def presentationMode() -> bool: ...
def previousViewNode() -> str: ...
def progressiveSourceLoading() -> bool: ...
def properties(nodeName: str) -> list[str]: ...
def propertyExists(propertyName: str) -> bool: ...
def propertyInfo(propertyName: str) -> PropertyInfo: ...
def pushEventTable(table: str) -> None: ...
def putUrlOnClipboard(url: str, title: str) -> None: ...
def queryDriverAttribute(attribute: str) -> str: ...
def readCDL(filename: str, nodeName: str) -> None: ...
def readLUT(filename: str, nodeName: str) -> None: ...
def readProfile(fileName: str, node: str) -> None: ...
def realFPS() -> float: ...
def redo() -> None: ...
def redoHistory() -> list[str]: ...
def redoPathSwapVars(pathWithoutVars: str) -> str: ...
def redraw() -> None: ...
def releaseAllCachedImages() -> None: ...
def releaseAllUnusedImages() -> None: ...
def reload() -> None: ...
def reload(startFrame: int, endFrame: int) -> None: ...
def relocateSource(oldFileName: str, newFileName: str) -> None: ...
def relocateSource(sourceNode: str, oldFileName: str, newFileName: str) -> None: ...
def remoteApplications() -> list[str]: ...
def remoteConnect(name: str, host: str) -> None: ...
def remoteConnections() -> list[str]: ...
def remoteContacts() -> list[str]: ...
def remoteDefaultPermission() -> int: ...
def remoteDisconnect(remoteContact: str) -> None: ...
def remoteLocalContactName() -> str: ...
def remoteNetwork(on: bool) -> None: ...
def remoteNetworkStatus() -> int: ...
def remoteSendDataEvent(event: str, target: str, interp: str, data: bytearray, recipients: list[str]) -> None: ...
def remoteSendEvent(event: str, target: str, contents: str) -> None: ...
def remoteSendMessage(message: str) -> None: ...
def renderedImages() -> list[RenderedImageInfo]: ...
def resetMbps() -> None: ...
def resizeFit() -> None: ...
def rvioSetup() -> None: ...
def saveFileDialog(associated: bool) -> str: ...
def saveSession(fileName: str) -> None: ...
def scrubAudio(on: bool) -> None: ...
def sendInternalEvent(eventName: str) -> str: ...
def sequenceOfFile(file: str) -> tuple[str, int]: ...
def sessionFileName() -> str: ...
def sessionFromUrl(url: str) -> None: ...
def sessionName() -> str: ...
def sessionNames() -> list[str]: ...
def setActiveSourceMediaRep(sourceNode: str, mediaRepName: str) -> None: ...
def setAudioCacheMode(mode: int) -> None: ...
def setBGMethod(methodName: str) -> None: ...
def setByteProperty(propertyName: str, value: bytearray) -> None: ...
def setCacheMode(mode: int) -> None: ...
def setCacheOutsideRegion(cacheOutside: bool) -> None: ...
def setCursor(cursorType: int) -> None: ...
def setDriverAttribute(attribute: str, value: str) -> None: ...
def setEventTableBBox(modeName: str, tableName: str, min: tuple[float, float], max: tuple[float, float]) -> None: ...
def setFPS(fps: float) -> None: ...
def setFilterLiveReviewEvents(shouldFilterEvents: bool) -> None: ...
def setFiltering(filterType: int) -> None: ...
def setFloatProperty(propertyName: str, value: list[float]) -> None: ...
def setFrame(frame: int) -> None: ...
def setFrameEnd(frame: int) -> None: ...
def setFrameStart(frame: int) -> None: ...
def setHalfProperty(propertyName: str, value: list[float]) -> None: ...
def setHardwareStereoMode(active: bool) -> None: ...
def setInPoint(frame: int) -> None: ...
def setInc(inc: int) -> None: ...
def setIntProperty(propertyName: str, value: list[int]) -> None: ...
def setMargins(margins: tuple[float, float, float, float]) -> None: ...
def setNodeInputs(nodeName: str, inputNodes: list[str]) -> None: ...
def setOutPoint(frame: int) -> None: ...
def setPlayMode(mode: int) -> None: ...
def setPresentationMode(value: bool) -> None: ...
def setProgressiveSourceLoading(enable: bool) -> None: ...
def setRealtime(realtime: bool) -> None: ...
def setRemoteDefaultPermission(permission: int) -> None: ...
def setRemoteLocalContactName(name: str) -> str: ...
def setRendererType(name: str) -> None: ...
def setSessionFileName(name: str) -> None: ...
def setSessionName(name: str) -> None: ...
def setSessionType(sessionType: int) -> None: ...
def setSourceMedia(sourceNode: str, fileNames: list[str]) -> None: ...
def setStringProperty(propertyName: str, value: list[str]) -> None: ...
def setViewNode(nodeName: str) -> None: ...
def setViewSize(width: int, height: int) -> None: ...
def setWindowTitle(title: str) -> None: ...
def shortAppName() -> str: ...
def showBottomViewToolbar(show: bool) -> None: ...
def showConsole() -> None: ...
def showNetworkDialog() -> None: ...
def showTopViewToolbar(show: bool) -> None: ...
def skipped() -> int: ...
def sourceAtPixel(p: tuple[float, float]) -> list[PixelImageInfo]: ...
def sourceAttributes(sourceName: str) -> list[tuple[str, str]]: ...
def sourceDataAttributes(sourceName: str) -> list[tuple[str,bytearray]]: ...
def sourceDisplayChannelNames() -> list[str]: ...
def sourceGeometry(name: str) -> list[tuple[float, float]]: ...
def sourceMedia(sourceName: str) -> tuple[str, list[str], list[str]]: ...
def sourceMediaInfo(sourceName: str) -> SourceMediaInfo: ...
def sourceMediaInfoList(nodeName: str) -> list[SourceMediaInfo]: ...
def sourceMediaRep(sourceNode: str) -> str: ...
def sourceMediaRepSourceNode(sourceNode: str) -> str: ...
def sourceMediaRepSwitchNode(sourceNode: str) -> str: ...
def sourceMediaReps(sourceNode: str) -> list[str]: ...
def sourceMediaRepsAndNodes(sourceOrSwitchNode: str) -> list[tuple[str, str]]: ...
def sourceNameWithoutFrame(name: str) -> str: ...
def sourcePixelValue(sourceName: str, px: float, py: float) -> tuple[float, float, float, float]: ...
def sources() -> list[tuple[str,int,int,int,float,bool,bool]]: ...
def sourcesAtFrame(frame: int) -> list[str]: ...
def sourcesRendered() -> list[RenderedImageInfo]: ...
def spoofConnectionStream(streamFile: str, timeScale: float) -> None: ...
def startTimer() -> None: ...
def startupResize() -> bool: ...
def stereoSupported() -> bool: ...
def stop() -> None: ...
def stopTimer() -> float: ...
def testNodeInputs(nodeName: str, inputNodes: list[str]) -> str: ...
def theTime() -> float: ...
def toggleMenuBar() -> None: ...
def unbind(modeName: str, tableName: str, eventName: str) -> None: ...
def unbindRegex(modeName: str, tableName: str, eventName: str) -> None: ...
def undo() -> None: ...
def undoHistory() -> list[str]: ...
def undoPathSwapVars(pathWithVars: str) -> str: ...
def updateLUT() -> None: ...
def updateNodeDefinition_(defitionName: str) -> None: ...
def validateShotgunToken() -> str: ...
def videoDeviceIDString(moduleName: str, deviceName: str, idtype: int) -> str: ...
def videoState() -> VideoDeviceState: ...
def viewNode() -> str: ...
def viewNodes() -> list[str]: ...
def viewSize() -> tuple[float, float]: ...
def watchFile(filename: str, watch: bool) -> None: ...
def writeAllNodeDefinitions(fileName: str) -> None: ...
def writeNodeDefinition(nodeName: str, fileName: str) -> None: ...
def writeProfile(fileName: str, node: str) -> None: ...
