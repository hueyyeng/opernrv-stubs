from _typeshed import Incomplete
from typing import Literal, Any, Sequence, Callable, TypeVar

F = TypeVar('F', bound=Callable[..., Any])


# https://aswf-openrv.readthedocs.io/en/latest/rv-manuals/rv-reference-manual/rv-reference-manual-chapter-five.html#
class Event:
    def pointer(self) -> tuple[float, float]:
        """Returns the location of the pointer relative to the view."""
        ...

    def relativePointer(self) -> tuple[float, float]:
        """Returns the location of the pointer relative to the current widget or view if there is none."""
        ...

    def reference(self) -> tuple[float, float]:
        """Returns the location of initial button mouse down during dragging."""
        ...

    def domain(self) -> tuple[float, float]:
        """Returns the size of the view."""
        ...

    def subDomain(self) -> tuple[float, float]:
        """Returns the size of the current widget if there is one. relativePointer() is positioned in the subDomain()."""
        ...

    def buttons(self) -> int:
        """Returns an int or’d from the symbols: Button1, Button2, and Button3."""
        ...

    def modifiers(self) -> int:
        """Returns an int or’d from the symbols: None, Shift, Control, Alt, Meta, Super, CapLock, NumLock, ScrollLock."""
        ...

    def key(self) -> int:
        """Returns the “keysym” value for the key as an int"""
        ...

    def name(self) -> str:
        """Returns the name of the event"""
        ...

    def contents(self) -> str:
        """Returns the string content of the event if it has any. This is normally the case with internal events like new-source, new-session, etc. Pointer, key, and other device events do not have a contents() and will throw if it’s called on them. Drag and drop events return the data associated with them. Some render events have contents() indicating the type of render occurring."""
        ...

    def contentsArray(self) -> list[str]:
        """Same as contents(), but in the case of some internal events ancillary information may be present which can be used to avoid calling additional commands."""
        ...

    def sender(self) -> str:
        """Returns the name of the sender"""
        ...

    def contentType(self) -> int:
        """Returns an int describing the contents() of a drag and drop event. One of: UnknownObject, BadObject, FileObject, URLObject, TextObject."""
        ...

    def timeStamp(self) -> float:
        """Returns a float value in seconds indicating when the event occurred"""
        ...

    def reject(self) -> None:
        """Calling this function will cause the event to be send to the next binding found in the event table stack. Not calling this function stops the propagation of the event."""
        ...

    def setReturnContents(self, foo: str) -> None:
        """Events which have a contents may also have return content. This is used by the remote network events which can have a response."""
        ...


def concat_seperator() -> Literal[";", ":"]: ...


class State:
    minorModes: Incomplete

    def __init__(self) -> None: ...


class Mode:
    def __init__(self) -> None: ...

    def isActive(self) -> bool: ...

    def modeName(self) -> str | None: ...

    def drawOnEmpty(self) -> bool: ...

    def drawOnPresentation(self) -> bool: ...

    def activate(self) -> None: ...

    def deactivate(self) -> None: ...

    def toggle(self) -> None: ...

    def layout(self, event: Event) -> None: ...

    def render(self, event: Event) -> None: ...

    def supportPath(self, module, packageName: str | None = None) -> str: ...

    def qmlPath(self, module, packageName: str | None = None) -> str: ...

    def configPath(self, packageName: str) -> str: ...


class MinorMode(Mode):
    def __init__(self) -> None: ...

    def init(
        self,
        name: str,
        globalBindings: list[tuple] | None,
        overrideBindings: list[tuple] | None,
        menu: list[Any] | None = None,
        sortKey: str | None = None,
        ordering: int = 0
    ) -> None: ...

    def setMenu(self, menu) -> None: ...

    def setMenuStrict(self, menu) -> None: ...

    def defineEventTable(self, tableName: str, bindings: list[tuple]) -> None: ...

    def defineEventTableRegex(self, tableName: str, bindings: list[tuple]) -> None: ...

    def urlDropFunc(self, url: Any): ...


class Widget(MinorMode):
    def __init__(self) -> None: ...

    def layout(self, event: Event) -> None: ...

    def render(self, event: Event) -> None: ...

    def init(
        self,
        name,
        globalBindings,
        overrideBindings,
        menu: list[Any] | None = None,
        sortKey: str | None = None,
        ordering: int = 0
    ) -> None: ...

    def toggle(self) -> None: ...

    def updateMargins(self, activated: bool) -> None: ...

    def updateBounds(self, minp: Sequence[float], maxp: Sequence[float]) -> None: ...

    def contains(self, p: Sequence[float]): ...

    def requiredMarginValue(self) -> float: ...

    def drawInMargin(self, whichMargin: int) -> None: ...

    def storeDownPoint(self, event: Event) -> None: ...

    def drag(self, event: Event) -> None: ...

    def near(self, event: Event) -> bool: ...

    def move(self, event: Event) -> None: ...

    def release(self, event: Event, closeFunc: Callable[[F], F] | None = None) -> None: ...
